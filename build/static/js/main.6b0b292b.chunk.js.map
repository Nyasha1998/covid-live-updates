{"version":3,"sources":["InfoBox.js","LineGraph.js","Table.js","util.js","Map.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","Card","onClick","className","CardContent","Typography","color","gutterButtom","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","toolipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","a","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","Table","countries","map","country","casesTypeColors","hex","multiplier","recovered","deaths","sortData","sortedData","sort","b","prettyPrintStat","stat","showDataOnMap","Circle","center","countryInfo","lat","long","fillOpacity","fillColor","redius","Math","sqrt","Popup","style","backgroundImage","flag","Map","zoom","MapContainer","TileLayer","url","attribution","App","setInputCountry","setCountryInfo","setCountries","mapCountries","setMapCountries","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","name","iso2","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b0b292b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './InfoBox.css';\r\nimport {Card, CardContent, Typography} from \"@material-ui/core\";\r\n\r\nfunction InfoBox({ title , cases, total, active, isRed, ...props }) { \r\n    return (\r\n        \r\n            <Card onClick={props.onClick} className={`infoBox ${active && \"infoBox--selected\"} ${\r\n                isRed && \"infoBox--red\"\r\n            }`}>\r\n                \r\n                <CardContent>\r\n                    <Typography color=\"textSecondary\" gutterButtom >\r\n                        {title}\r\n                    </Typography>\r\n      \r\n                    <h2 className={`infoBox_cases ${!isRed && \"infoBox_cases--green\"}`}>\r\n                        {cases}\r\n                        </h2>                \r\n               \r\n\r\n                    <Typography  className=\"infoBox_total\" color=\"textSecondary\">\r\n                         {total} Total\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n        \r\n    )\r\n}\r\n\r\nexport default InfoBox;\r\n","import React, {useState, useEffect} from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (toolipItem, data) {\r\n                return numeral(toolipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\",\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false\r\n                },\r\n                ticks: {\r\n                    callback: function (value, index, values) {\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n    let chartData = [];\r\n    let lastDataPoint;\r\n    for (let date in data.cases) {\r\n      if (lastDataPoint) {\r\n        let newDataPoint = {\r\n          x: date,\r\n          y: data[casesType][date] - lastDataPoint,\r\n        };\r\n        chartData.push(newDataPoint);\r\n      }\r\n      lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData;\r\n  };\r\n\r\nfunction LineGraph({ casesType = \"cases\", ...props }) {\r\n    const [data, setData] = useState({});\r\n    \r\n        useEffect(() => {\r\n            const fetchData = async () => {\r\n     \r\n                await  fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n                .then((response) => {\r\n                 return response.json();\r\n                } )\r\n     \r\n                .then((data) => {   \r\n                    let chartData = buildChartData(data, casesType );\r\n                    setData(chartData);\r\n                    console.log(chartData);\r\n                });\r\n            };\r\n\r\n            fetchData();\r\n         }, [casesType]);\r\n    \r\n    return (\r\n        <div>\r\n            className={props.className}\r\n            {data?.length > 0 && ( \r\n            <Line \r\n            data={{\r\n                datasets: [\r\n                    {\r\n                    backgroundColor: \"rgba(204, 16, 52, 0.5\",\r\n                    borderColor: \"#CC1034\",\r\n                    data: data,\r\n                },\r\n            ],\r\n         }} \r\n         options={options}\r\n       /> \r\n   )}\r\n </div> \r\n    );   \r\n}\r\nexport default LineGraph;\r\n","import React from 'react';\r\nimport numeral from \"numeral\";\r\nimport './Table.css';\r\n\r\nfunction Table({countries}) {\r\n    return(\r\n        <div className=\"table\">\r\n        {countries.map((country) => (\r\n     <tr>\r\n         <td>{country}</td>\r\n         <td>\r\n             <strong>{numeral(country.cases).format(\"0.0\")}</strong>\r\n         </td>\r\n     </tr>\r\n        ))}\r\n    </div>\r\n    );\r\n  }\r\n\r\nexport default Table;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex: \"#CC1034\",\r\n        multiplier: 800,\r\n    },\r\n    recovered: {\r\n        hex: \"#7dd71d\",        \r\n        multiplier: 1200,\r\n    },\r\n    deaths: {\r\n        hex: \"#fb4443\",\r\n        multiplier: 2000,\r\n    },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n\r\n    sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n        return -1;\r\n    } else {\r\n        return 1;\r\n    }\r\n    })\r\n    return sortedData;\r\n}\r\n\r\nexport const prettyPrintStat = (stat) => \r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\"; \r\n\r\n//Draw circles on the map with intersactive toolkit\r\nexport const showDataOnMap = (data, casesType = \"cases\") => \r\n    data.map((country) => (\r\n      <Circle\r\n        center={[country.countryInfo.lat, country.countryInfo.long]}\r\n        fillOpacity={0.4}\r\n        color={casesTypeColors[casesType].hex}\r\n        fillColor={casesTypeColors[casesType].hex}\r\n        redius={\r\n            Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n        }\r\n      > \r\n        <Popup>\r\n           <div className=\"info-container\">\r\n               <div \r\n                   className=\"info-flag\"\r\n                   style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n               />\r\n               <div className=\"info-name\">{country.country}</div>\r\n               <div className=\"info-confirmed\">\r\n                   Cases: {numeral(country.cases).format(\"0,0\")}\r\n                   </div>\r\n               <div className=\"info-recovered\">\r\n                   Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n                   </div>\r\n               <div className=\"info-deaths\">\r\n                   Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n                   </div>\r\n           </div>\r\n        </Popup>\r\n      </Circle>\r\n    ));\r\n\r\n","import React from \"react\";\r\nimport \"./Map.css\";\r\nimport { MapContainer, TileLayer } from \"react-leaflet\";\r\nimport { showDataOnMap } from \"./util\";\r\n\r\nfunction Map({ countries, casesType, center, zoom}) {\r\n    return (\r\n        <div className=\"map\">\r\n    \r\n            <MapContainer center={center} zoom={zoom} >\r\n                <TileLayer\r\n                   url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                   attribution='&copy; <a href=\"http://osm.org/copyright\"> OpenStreetMap</a> contributors'\r\n                   />\r\n              {showDataOnMap(countries, casesType)}\r\n            </MapContainer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox.js\";\nimport LineGraph from \"./LineGraph.js\";\nimport Table from \"./Table.js\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport numeral from \"numeral\";\nimport Map from \"./Map.js\"; \nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [country, setInputCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          const sortedData = sortData(data);\n          setMapCountries(data);\n          setTableData(sortedData);\n           setCountries(countries);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  console.log(casesType);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setInputCountry(countryCode); \n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 Tracker</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            isRed\n            active={casesType === \"cases\"}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={numeral(countryInfo.cases).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            active={casesType === \"recovered\"}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={numeral(countryInfo.recovered).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            isRed\n            active={casesType === \"deaths\"}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format(\"0.0a\")}\n          />\n        </div>\n        <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <div className=\"app__information\">\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n            <h3 className=\"app_graphTitle\">Worldwide new {casesType}</h3>\n            <LineGraph className=\"app_graph \" casesType={casesType} />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}